newdata4$therapy <- "war"
survdata4 <- survfit(model, newdata=newdata4)
names(survdata4)
head(survdata4$surv)
dim(survdata4$surv)
plot(survdata4$time, survdata4$surv[,1])
points(survdata4$time, survdata4$surv[,2])
surv4 <- rowMeans(survdata4$surv)
points(survdata4$time, surv3)
plot(survdata$time, surv1, type="s", ylim=c(0.8, 1)) # api
points(survdata$time, surv2, type="s") # dab
points(survdata$time, surv3, type="s") # riv
points(survdata$time, surv4, type="s") # war
plot(survdata$time, surv1, type="s", ylim=c(0.8, 1)) # api
points(survdata$time, surv2, type="s") # dab
points(survdata$time, surv3, type="s") # riv
points(survdata$time, surv4, type="s") # war
model_org <- coxph(Surv(T_osfx1,status_osfx1) ~ therapy + age_index + istroke_tia + index_year, data = cohort, weights = es_mean_ATE)
model <- coxph(Surv(T_osfx1,status_osfx1) ~ therapy + age_index + istroke_tia + index_year, data = cohort)
model$coefficients = model_org$coefficients
newdata1 <- cohort
newdata1$therapy <- "api"
survdata <- survfit(model, newdata=newdata1)
#plot(survdata$time, survdata$surv[,1])
#points(survdata$time, survdata$surv[,2])
surv1 <- rowMeans(survdata$surv)
# Dab
newdata2 <- cohort
newdata2$therapy <- "dab"
survdata2 <- survfit(model, newdata=newdata2)
surv2 <- rowMeans(survdata2$surv)
# riv
newdata3 <- cohort
newdata3$therapy <- "riv"
survdata3 <- survfit(model, newdata=newdata3)
surv3 <- rowMeans(survdata3$surv)
#points(survdata3$time, surv3)
# war
newdata4 <- cohort
newdata4$therapy <- "war"
survdata4 <- survfit(model, newdata=newdata4)
surv4 <- rowMeans(survdata4$surv)
plot(survdata$time, surv1, type="s", ylim=c(0.8, 1)) # api
points(survdata$time, surv2, type="s") # dab
points(survdata$time, surv3, type="s") # riv
points(survdata$time, surv4, type="s") # war
# Simulate Data-----------------------------------------------------------
set.seed(20200424)              # set seed
n <- 20000                      # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
p <- 3000                       # total no. of codes
covars <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(covars) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
covars <- as.data.frame(covars)
# Create a cohort
cohort <- cbind(id, trt, out, age, sex)
# Create a cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 3000
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
dimension_names <- c("drug", "clin", "ref")
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, covars,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE)
# install.packages("devtools")
# install library
library(devtools)
# install_github("lendle/hdps") # install hdPS library
library(hdps)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE)
hdpsSelected <- predict(hdpsRun)
head(screened_covars)
?hdps # help file
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE,
return_bias=TRUE)
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE)
# Assess recurrence
hdpsRec <- assess_recurrence(hdpsCovs)
# Assess recurrence
hdpsRec <- as.data.frame(assess_recurrence(hdpsCovs))
set.seed(20200424)              # set seed
n <- 200                    # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Create cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 30
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Assess recurrence
hdpsRec <- as.data.frame(assess_recurrence(hdpsCovs))
View(hdpsRec)
View(hdpsRec)
# Identify covariates which are most prevalent
hdpsPrev <- as.data.frame(identify_covariates(covars, keep_n_covars = 200, indexes = FALSE))
View(hdpsPrev)
# Identify covariates which are most prevalent
hdpsPrev <- as.data.frame(identify_covariates(covars, keep_n_covars = 200, indexes = TRUE))
View(hdpsPrev)
# Identify covariates which are most prevalent
hdpsPrev <- as.data.frame(identify_covariates(covars, keep_n_covars = 200, indexes = FALSE))
# Assess recurrence
hdpsRec <- as.data.frame(assess_recurrence(hdpsPrev))
# Identify covariates which are most prevalent
hdpsPrev <- as.data.frame(identify_covariates(covars, keep_n_covars = 200, indexes = FALSE))
# Assess recurrence
hdpsRec <- as.data.frame(assess_recurrence(hdpsPrev))
# Prioritize covariates
# Prioritize covariates
hdpsPrior <- prioritize_covariates(outcome, treatment, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
# Prioritize covariates
hdpsPrior <- prioritize_covariates(cohort$out, cohort$trt, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
# Prioritize covariates
hdpsPrior <- prioritize_covariates(cohort$out, cohort$trt, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
set.seed(20200424)              # set seed
n <- 200                    # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
keep_n_per_dimension = 200,
keep_k_total = 500,
verbose=TRUE)
# Prioritize covariates
hdpsPrior <- prioritize_covariates(cohort$out, cohort$trt, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
# Prioritize covariates
hdpsPrior <- prioritize_covariates(out, trt, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
# Simulate Cohort --
------------------------------------------------------
set.seed(20200424)              # set seed
n <- 200                    # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Create cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 30
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Identify covariates which are most prevalent
hdpsPrev <- as.data.frame(identify_covariates(covars, keep_n_covars = 200, indexes = FALSE))
# Assess recurrence
hdpsRec <- as.data.frame(assess_recurrence(hdpsPrev))
# Prioritize covariates
hdpsPrior <- prioritize_covariates(out, trt, hdpsRec, return_bias = FALSE,
keep_NaNs = FALSE)
hdpsSelected <- as.data.frame
# Identify top 500 selected codes and store in dataframe
hdpsSelected <- predict(hdpsRun)
hdpsSelected <- as.data.frame
hdpsSelected <- as.data.frame(hdpsSelected)
# Identify top 500 selected codes and store in dataframe
hdpsSelected <- predict(hdpsRun)
hdpsSelected <- as.data.frame(hdpsSelected)
# Analysis ---------------------------------------------------------------
# Combine cohort and hdps data
cohort <- cbind(cohort, hdpsSelected)
# Estimate propensity score
psModel <- glm(trt ~ cohort[4:35], # all columns except 'id' and 'out'
family=binomial(link='logit'),
data=cohort)
# Estimate propensity score
psModel <- glm(trt ~ cohort[,4:35], # all columns except 'id' and 'out'
family = binomial(link='logit'),
data = cohort)
# Estimate propensity score
psModel <- glm(trt ~ cohort[,4:35], # all columns except 'id' and 'out'
family = binomial(link='logit'),
data = cohort)
# Estimate propensity score
vars <- paste("cohort",4:35, sep="")
vars <- paste(cohort, 4:35, sep="")
(fmla <- as.formula(paste("trt ~ ", paste(vars, collapse= "+"))))
library(tidyverse)
psCohort <- cohort %>%
select(-c(id, out))
psModel <- glm(trt ~ ., # '.'  all columns except trt will be included
family = binomial(link='logit'),
data = psCohort)
summary(model)
summary(psModel)
# Predict probability of receiving treatment
cohort$pscore <- predict(psModel, type = "response")
# Generate inverse of probability weights
cohort <- cohort %>%
mutate(wt = ifelse(trt==1, 1/pscore, 1/(1-pscore)))
# Outcome model
outModel <- glm(out ~ trt,
family = binomial(link='logit'),
data=cohort,
weights = wt) # incorporate weighgts
psCohort <- cohort %>%
select(-c(id, out))
psModel <- glm(trt ~ ., # '.'  all columns except trt will be included
family = binomial(link='logit'),
data   = psCohort)
# Predict probability of receiving treatment
cohort$pscore <- predict(psModel, type = "response")
# Generate inverse of probability weights
cohort <- cohort %>%
mutate(wt = ifelse(trt==1, 1/pscore, 1/(1-pscore)))
# Outcome model
outModel <- glm(out ~ trt,
family = binomial(link='logit'),
data=cohort,
weights = wt) # incorporate weighgts
View(cohort)
View(cohort)
# install.packages("devtools")
# install library
library(devtools)
library(tidyverse)
# install_github("lendle/hdps") # install hdPS library
library(hdps)
?hdps # help file
set.seed(20200424)              # set seed
n <- 200                    # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Create cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 30
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
# Keep top 200 most prevalent codes per dimension
keep_n_per_dimension = 200,
# Transforms codes to hdPS recurrence variables (once, sporadic, frequent)
# Keep top 500 most prevalent codes overall
keep_k_total = 500,
verbose=TRUE)
# Identify top 500 selected codes and store in dataframe
hdpsSelected <- predict(hdpsRun)
hdpsSelected <- as.data.frame(hdpsSelected)
# Analysis ---------------------------------------------------------------
# Combine cohort and hdps data
cohort <- cbind(cohort, hdpsSelected)
psCohort <- cohort %>%
select(-c(id, out))
psModel <- glm(trt ~ ., # '.'  all columns except trt will be included
family = binomial(link='logit'),
data   = psCohort)
# Predict probability of receiving treatment
cohort$pscore <- predict(psModel, type = "response")
# Generate inverse of probability weights
cohort <- cohort %>%
mutate(wt = ifelse(trt==1, 1/pscore, 1/(1-pscore)))
# Outcome model
outModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort,
weights = wt) # incorporate weighgts
summary(outModel)
# Outcome model
# Unweighted
unweightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort)
summary(unweightedModel)
# Weighted
weightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort,
weights = wt) # incorporate weights
# Weighted
weightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort,
weights = wt) # incorporate weights
# The warning refers to the weights
summary(weightedModel)
# Outcome model
# Unweighted
unweightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort)
summary(unweightedModel)
# Weighted
weightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort,
weights = wt) # incorporate weights
# The warning refers to the weights
summary(weightedModel)
results <- list(Unweighted = ShowRegTable(unweightedModel, printToggle = FALSE),
Weighted  = ShowRegTable(weightedModel, printToggle = FALSE))
print(results, quote = FALSE)
library(tableone)
# The warning refers to the weights
summary(weightedModel)
results <- list(Unweighted = ShowRegTable(unweightedModel, printToggle = FALSE),
Weighted  = ShowRegTable(weightedModel, printToggle = FALSE))
print(results, quote = FALSE)
# The warning refers to the weights
summary(weightedModel)
results <- list(Unweighted = ShowRegTable(unweightedModel, printToggle = FALSE),
Weighted  = ShowRegTable(weightedModel, printToggle = FALSE))
warnings()
print(results, quote = FALSE)
set.seed(20200424)              # set seed
n <- 20000                      # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Create cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 3000
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
# Run hd-PS --------------------------------------------------------------
# Identify dimension prefixs
dimension_names <- c("drug", "clin", "ref")
# Run hd-PS wrapper
hdpsRun <- hdps_screen(out, trt, hdpsCovs,
dimension_names = dimension_names,
# Keep top 200 most prevalent codes per dimension
keep_n_per_dimension = 200,
# Transforms codes to hdPS recurrence variables (once, sporadic, frequent)
# Keep top 500 most prevalent codes overall
keep_k_total = 500,
verbose=TRUE)
# Identify top 500 selected codes and store in dataframe
hdpsSelected <- predict(hdpsRun)
hdpsSelected <- as.data.frame(hdpsSelected)
# Analysis ---------------------------------------------------------------
# Combine cohort and hdps data
cohort <- cbind(cohort, hdpsSelected)
psCohort <- cohort %>%
select(-c(id, out))
psModel <- glm(trt ~ ., # '.'  all columns except trt will be included
family = binomial(link='logit'),
data   = psCohort)
# Predict probability of receiving treatment
cohort$pscore <- predict(psModel, type = "response")
# Generate inverse of probability weights
cohort <- cohort %>%
mutate(wt = ifelse(trt==1, 1/pscore, 1/(1-pscore)))
# Outcome model
# Unweighted
unweightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort)
# Weighted
weightedModel <- glm(out ~ trt,
family  = binomial(link='logit'),
data    = cohort,
weights = wt) # incorporate weights
results <- list(Unweighted = ShowRegTable(unweightedModel, printToggle = FALSE),
Weighted  = ShowRegTable(weightedModel, printToggle = FALSE))
print(results, quote = FALSE)
set.seed(20200424)              # set seed
n <- 200                        # no. of patients
id <- 1:n                       # patient identifier
out <- rbinom(n, 1, 0.05)       # binary treatment variable
trt <- rbinom(n, 1, 0.5)        # binary outcome varia
sex <- rbinom(n, 1, 0.1)        # binary sex variable
age <- rnorm(n, 50, 3)          # continuous age variable
# Create cohort
cohort <- as.data.frame(cbind(id, trt, out, age, sex))
p <- 30
hdpsCovs <- matrix(rbinom(n*p, 3, 0.05), n)
colnames(hdpsCovs) <- c(paste("drug", 1:(p/3), sep="_"),
paste("clin", 1:(p/3), sep="_"),
paste("ref", 1:(p/3), sep="_"))
hdpsCovs <- as.data.frame(hdpsCovs)
View(hdpsCovs)
# Identify top 500 selected codes and store in dataframe
hdpsSelected <- as.data.frame(predict(hdpsRun))
y <- import("/Users/lsh1401926/Downloads/roz_foi-2020-07-10.rds")
y <- readRDS("/Users/lsh1401926/Downloads/roz_foi-2020-07-10.rds")
write.csv(y,"/Users/lsh1401926/Downloads/roz_foi-2020-07-10.csv")
# Import Data
sccsData <- read.csv("./data/nrtdat.csv")
setwd("/Users/lsh1401926/Desktop/post-covid-thrombosis-research/")
###############
# Load packages
library(SCCS)
library(ggplot2)
library(cowplot)
# Import Data
sccsData <- read.csv("./data/nrtdat.csv")
View(sccsData)
?SCCS
setwd("/Users/lsh1401926/Desktop/post-covid-thrombosis-research/")
###############
# Load packages
library(SCCS)
library(ggplot2)
library(cowplot)
# Import Data
sccsData <- read.csv("./data/nrtdat.csv")
View(sccsData)
setwd("/Users/lsh1401926/Desktop/post-covid-thrombosis-research/")
###############
# Load packages
library(SCCS)
library(ggplot2)
library(cowplot)
# Import Data
sccsData <- read.csv("./data/nrtdat.csv")
# Define ages at Trt, End, Event in daays
# nrt = trt, end, mi = event
perm <- order(sccsData$nrt, sccsData$end, sccsData$mi)
sccsData$s <- sccsData$nrt[perm]/365.25
sccsData$e <- sccsData$end[perm]/365.25
sccsData$t <- sccsData$mi[perm]/365.25
sccsData$v <- 1:length(sccsData$t)
# Investigate distributions
distPlot <- ggplot(sccsData, aes(t, v))  +
geom_point(colour = "navy", size = 1) +
geom_segment(aes(x = s, y = v, xend = e, yend = v), colour="navy", data = sccsData) +
labs(y = "Case Number", x = "Age (Years)") +
theme_classic() +
theme(axis.text.y = element_blank(),
axis.ticks.y=element_blank(),
axis.title=element_text(size=14),
axis.text=element_text(size=14))
distPlot
# Model1 - no age effect included
stdModel1 <- standardsccs(event~nrt, indiv=case, astart=nrt,
aend=end, aevent=mi, adrug=nrt, aedrug=nrt+28,
expogrp=c(0,8,15,22), agegrp=NULL, data=sccsData)
stdModel1
# Model1 - no age effect included
stdModel1 <- standardsccs(event~nrt, indiv=case, astart=nrt,
aend=end, aevent=mi, adrug=nrt, aedrug=nrt+28,
expogrp=c(0,8,15,22), agegrp=NULL, data=sccsData)
stdModel1
View(sccsData)
?SCCS
